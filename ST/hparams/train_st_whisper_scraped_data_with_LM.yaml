# ############################################################################
# Model: E2E ASR with Whisper encoder
# Encoder: Whisper + linear projection
# Decoder: Transformer
# Tokens: unigram (1000)
# losses: NLL
# Training: Pashto-French corpus
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 10667
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]
debug: False

skip_to_test: True

output_folder: !ref output/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.log

lm_path: !PLACEHOLDER
max_segment_duration: 179 # Specifies max segment duration: 179 will ignore 2 files, 269 will ignore 1
min_segment_duration: 1.5

# Data options
# data folder is the place where the json files will be stored prior to training
root_data_folder: !PLACEHOLDER
data_folder: !ref <root_data_folder>/ST_DW_Pashto

use_scraped_data: False
unlabelled_data_folder: !PLACEHOLDER
official_data_folder: !PLACEHOLDER
unprepared_train_json_file: !ref <unlabelled_data_folder>/all_train.json  # Standard JSON files
prepared_train_json_for_scraped_data: !ref <data_folder>/all.json

# For dataset inference: eg. Generating Translation for the evaluation dataset
translate_dataset_json: !PLACEHOLDER
submissions_folder: !PLACEHOLDER
translation_file_output: !ref <submissions_folder>/ontrac.st.constrained.contrastive2

lang: "fr" #for the BLEU score detokenization
vocab_size: 1000 #for SentencePiece tokenizer (unigram)

# URL for the HuggingFace model we want to load
whisper_hub: "openai/whisper-small"

# Pre-trained model path (if any)
asr_model_path: ""

# Whisper specific parameters
whisper_frozen: False
keep_n_layers: 12 # keep first N layers from the Transformer Encoder stack inside the whisper model

# Training parameters
number_of_epochs: 100
lr: 0.0001
lr_whisper: 0.000001
batch_size: 4
test_batch_size: 4

loss_reduction: batchmean
ckpt_interval_minutes: 15 # save checkpoint every N min

# yamllint disable-line rule:line-length
# Data sorting parameters: sorting_debug_duration replaces sorting_min_duration in debug mode
sorting: ascending
sorting_min_duration: 0
sorting_debug_duration: 3
sorting_max_duration: !ref <max_segment_duration>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

dataloader_options:
    batch_size: !ref <batch_size>
    num_workers: 8

test_dataloader_options:
    batch_size: 8
    num_workers: 0

transcribe_dataloader_options:
    batch_size: 1
    num_workers: 0
# Feature parameters (Whisper)
features_dim: 768 #base whisper output dimension, for medium replace by 1024

#projection for whisper
enc_dnn_layers: 1
enc_dnn_neurons: 512

# Transformer
embedding_size: 512
d_model: 512
nhead: 8
num_decoder_layers: 6
d_ffn: 1024
transformer_dropout: 0.3
activation: !name:torch.nn.GELU
# yamllint disable-line rule:line-length
output_neurons: !ref <vocab_size> # /!\ needs to be changed accordingly to the vocabulary
attention_type: "regularMHA" # "RelPosMHAXL" or "regularMHA"

# Outputs
blank_index: 0
label_smoothing: 0.1
pad_index: 0
bos_index: 1
eos_index: 2

# Decoding parameters
# Be sure that the bos and eos index match with the BPEs ones
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_beam_size: 5
test_beam_size: 5

############################## models ################################
# Whisper encoder
whisper: !new:speechbrain.lobes.models.huggingface_whisper.HuggingFaceWhisper
    source: !ref <whisper_hub>
    freeze: !ref <whisper_frozen>
    encoder_only: True
    save_path: !ref <save_folder>/whisper_checkpoint


#linear projection
enc: !new:speechbrain.lobes.models.VanillaNN.VanillaNN
    input_shape: [null, null, !ref <features_dim>]
    activation: !ref <activation>
    dnn_blocks: !ref <enc_dnn_layers>
    dnn_neurons: !ref <enc_dnn_neurons>

#transformer decoder
Transformer: !new:speechbrain.lobes.models.transformer.TransformerST.TransformerST # yamllint disable-line rule:line-length
    input_size: !ref <embedding_size>
    tgt_vocab: !ref <output_neurons>
    num_encoder_layers: 0
    num_decoder_layers: !ref <num_decoder_layers>
    nhead: !ref <nhead>
    d_model: !ref <d_model>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    attention_type: !ref <attention_type>
    normalize_before: True
    causal: False

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

# Transformer LM for decoding.
lm_model: !new:speechbrain.lobes.models.transformer.TransformerLM.TransformerLM
    vocab: 1000

modules:
    whisper: !ref <whisper>
    enc: !ref <enc>
    Transformer: !ref <Transformer>
    seq_lin: !ref <seq_lin>
    lm_model: !ref <lm_model>

model: !new:torch.nn.ModuleList
    - [!ref <enc>, !ref <Transformer>, !ref <seq_lin>]

adam_opt_class: !name:torch.optim.Adam
    lr: !ref <lr>

whisper_opt_class: !name:torch.optim.Adam
    lr: !ref <lr_whisper>

seq_cost: !name:speechbrain.nnet.losses.nll_loss
    label_smoothing: !ref <label_smoothing>
    reduction: !ref <loss_reduction>

lr_annealing_adam: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.5
    patient: 2

lr_annealing_whisper: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr_whisper>
    improvement_threshold: 0.0025
    annealing_factor: 0.9

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        whisper: !ref <whisper>
        lr_annealing_adam: !ref <lr_annealing_adam>
        lr_annealing_whisper: !ref <lr_annealing_whisper>
        counter: !ref <epoch_counter>

# Transferring ASR models to ST
asr_transfer_checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <asr_model_path>
asr_min_key: "WER"

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

valid_search: !new:speechbrain.decoders.S2STransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, null]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <valid_beam_size>
    using_eos_threshold: False
    length_normalization: False

test_search: !new:speechbrain.decoders.S2STransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, null]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    using_eos_threshold: True
    length_normalization: True
    lm_weight: 0.5
    lm_modules: !ref <lm_model>
    temperature_lm: 5


pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <save_folder>
    loadables:
        lm: !ref <lm_model>
    paths:
        lm: !ref <lm_path>/model.ckpt

# Functions that compute the statistics to track during the validation step.
bleu_computer: !name:speechbrain.utils.bleu.BLEUStats
    merge_words: False
    lang: !ref <lang>

acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats
